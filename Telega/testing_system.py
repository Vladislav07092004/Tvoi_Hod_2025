from aiogram import types
from aiogram.dispatcher import FSMContext
from sqlalchemy.orm import Session  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: orm –≤–º–µ—Å—Ç–æ omn
from bot import User, Task  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TestingSystem:
    def __init__(self, bot, session: Session):
        self.bot = bot
        self.session = session

    async def submit_solution(self, message: types.Message, state: FSMContext):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–±–æ—Ä–∞ —Ä–µ—à–µ–Ω–∏–π –æ—Ç —É—á–µ–Ω–∏–∫–æ–≤.
        """
        user = self.session.query(User).filter_by(telegram_id=str(message.from_user.id)).first()
        if not user or user.role != "student":
            await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
            return

        await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞ .py.")
        await state.set_state("waiting_for_solution")

    async def handle_solution(self, message: types.Message, state: FSMContext):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
        """
        if message.content_type == types.ContentType.DOCUMENT:
            file_name = message.document.file_name
            if not file_name.endswith(".py"):
                await message.reply("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .py.")
                return

            file_id = message.document.file_id
            file = await self.bot.get_file(file_id)
            file_path = file.file_path
            downloaded_file = await self.bot.download_file(file_path)
            solution = downloaded_file.read().decode("utf-8")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—à–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(solution=solution)

            # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await message.reply("–†–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
            await self.test_solution(message, state)
        else:
            await message.reply("‚ùå –û—à–∏–±–∫–∞: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª .py.")

    async def test_solution(self, message: types.Message, state: FSMContext):
        """
        –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—à–µ–Ω–∏—è.
        """
        data = await state.get_data()
        solution = data.get("solution")

        user = self.session.query(User).filter_by(telegram_id=str(message.from_user.id)).first()
        task = self.session.query(Task).filter_by(group_id=user.group_id).first()

        if not task:
            await message.reply("–û—à–∏–±–∫–∞: –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        result = self.run_tests(solution, task.expected_result)
        await message.reply(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n{result}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é
        await self.send_results_to_teacher(user, task, result)

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()

    def run_tests(self, solution: str, expected_result: str) -> str:
        """
        –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—à–µ–Ω–∏–π.
        """
        try:
            if solution.strip() == expected_result.strip():
                return "‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω! –í–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –≤–µ—Ä–Ω–æ–µ."
            else:
                return "‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω. –í–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ–µ."
        except Exception as e:
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}"

    async def send_results_to_teacher(self, user: User, task: Task, result: str):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é.
        """
        teacher = self.session.query(User).filter_by(id=task.group.teacher_id).first()
        if teacher:
            await self.bot.send_message(
                teacher.telegram_id,
                f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–∞ {user.full_name}:\n"
                f"–ó–∞–¥–∞–Ω–∏–µ: {task.name}\n"
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}"
            )